import pandas as pd
import geopandas as gpd
import streamlit as st
import folium
from shapely.geometry import Point
from sklearn.preprocessing import MinMaxScaler
from streamlit_folium import st_folium
import ee
import geemap.foliumap as geemap

st.set_page_config(layout="wide")
st.title("Vulnerability Index Web App")

# Initialize Earth Engine
try:
    ee.Initialize()
except Exception as e:
    ee.Authenticate()
    ee.Initialize()

# Load your CSV with .geo column
uploaded_file = st.file_uploader("Upload CSV with '.geo' column", type="csv")
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # Extract coordinates from '.geo'
    df['lon'] = df['.geo'].apply(lambda x: eval(x)['coordinates'][0])
    df['lat'] = df['.geo'].apply(lambda x: eval(x)['coordinates'][1])
    geometry = [Point(xy) for xy in zip(df.lon, df.lat)]
    gdf = gpd.GeoDataFrame(df, geometry=geometry, crs="EPSG:4326")

    # Show dataframe preview
    st.subheader("Data Preview")
    st.write(gdf.head())

    # Select index components
    st.sidebar.title("Vulnerability Index Components")
    vars_selected = st.sidebar.multiselect("Select input variables", 
                                           options=[col for col in df.columns if df[col].dtype != 'object'],
                                           default=None)

    if vars_selected and len(vars_selected) > 1:
        # Normalize and compute index
        scaler = MinMaxScaler()
        scaled = scaler.fit_transform(df[vars_selected])
        gdf["vulnerability_index"] = scaled.mean(axis=1)

        # Classify into low, medium, high
        gdf["category"] = pd.cut(gdf["vulnerability_index"], 
                                  bins=[-float("inf"), 0.33, 0.66, float("inf")], 
                                  labels=["Low", "Medium", "High"])

        # Export CSV
        st.download_button("Download CSV with Vulnerability Index", 
                           gdf[["lat", "lon", "vulnerability_index", "category"]].to_csv(index=False),
                           file_name="vulnerability_index.csv")

        # Show map
        st.subheader("Vulnerability Index Map")
        m = folium.Map(location=[gdf.lat.mean(), gdf.lon.mean()], zoom_start=6)
        color_dict = {"Low": "green", "Medium": "orange", "High": "red"}

        for _, row in gdf.iterrows():
            folium.CircleMarker(
                location=[row.lat, row.lon],
                radius=5,
                color=color_dict[row.category],
                fill=True,
                fill_opacity=0.7,
                popup=f"Index: {row.vulnerability_index:.2f}, Class: {row.category}"
            ).add_to(m)

        st_data = st_folium(m, width=800, height=600)
    else:
        st.warning("Please select at least two numeric variables to build the index.")

# Optionally connect to Earth Engine or Cloud Storage
st.sidebar.markdown("---")
st.sidebar.title("Optional: Earth Engine Connection")
if st.sidebar.button("Load Earth Engine LST (example)"):
    st.subheader("Sample Earth Engine Layer")
    Map = geemap.Map()
    lst = ee.ImageCollection("MODIS/006/MOD11A2") \
            .filterDate("2020-01-01", "2020-12-31") \
            .select("LST_Day_1km") \
            .mean().multiply(0.02).subtract(273.15)  # Convert to Celsius
    vis_params = {'min': 20, 'max': 40, 'palette': ['blue', 'green', 'red']}
    Map.addLayer(lst, vis_params, 'MODIS LST 2020')
    Map.to_streamlit(height=600)

